package com.ejada.microservices.shop.service;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ejada.microservices.shop.model.Cart;
import com.ejada.microservices.shop.model.CartItem;
import com.ejada.microservices.shop.repository.CartItemRepository;
import com.ejada.microservices.shop.repository.CartRepository;

@Service
public class CartService {

	@Autowired
	private CartRepository cartRepo;
	@Autowired
	private CartItemRepository cartItemRepo;

	private Double calculateTotalCost(List<CartItem> items) {
		return items.stream().mapToDouble(item -> item.getPrice() * item.getQuantity()).sum();
	}

	@Transactional
	public Cart addToCart(Long userId, CartItem cartItem) {
		Cart cart = cartRepo.findByUserId(userId);
		if (cart == null) {
			cart = new Cart(userId);
		}

		CartItem existingItem = findCartItem(cartItem.getProductId(), cart);

		if (existingItem != null) {
			existingItem.setQuantity(existingItem.getQuantity() + cartItem.getQuantity());
			cart.setTotalCost(calculateTotalCost(cart.getItems()));
			cartItemRepo.save(cartItem);
			cartRepo.save(cart);
			return cart;
		} else {
			cartItem.setCart(cart);
			cartItemRepo.save(cartItem);
			cart.getItems().add(cartItem);
			cart.setTotalCost(calculateTotalCost(cart.getItems()));
			cartRepo.save(cart);
			return cart;
		}
	}

	public void deleteCartItem(Long userId, Long itemId) {
	    Cart cart = cartRepo.findByUserId(userId);
	    if (cart == null) {
	        throw new NotFoundException("Cart not found"); // Or return an appropriate response
	    }

	    List<CartItem> cartItems = cart.getItems();
	    CartItem cartItem = findCartItem(itemId, cart);
	    if (cartItem != null) {
	        cartItems.remove(cartItem);
	        cart.setItems(cartItems);
	        cartRepo.save(cart);
	    } else {
	        throw new NotFoundException("CartItem not found"); // Or return an appropriate response
	    }
	}

	public CartItem findCartItem(Long itemId, Cart cart) {
		for (CartItem cartItem : cart.getItems()) {
			if (cartItem.getProductId() == itemId) {
				return cartItem;
			}
		}
		return null;
	}

	public Cart findCartById(Long cartId) {
		Cart cart = cartRepo.findById(cartId).get();

		return cart;
	}

	public Cart save(Cart cart) {
		return cartRepo.save(cart);
	}

	public Cart findCartByUserId(long userId) {
		Cart cart = cartRepo.findByUserId(userId);
		return cart;
	}

}
