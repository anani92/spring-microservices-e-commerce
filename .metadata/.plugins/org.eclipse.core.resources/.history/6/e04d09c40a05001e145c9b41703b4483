package com.ejada.microservices.inventory.controller;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ejada.microservices.inventory.model.InventoryItem;
import com.ejada.microservices.inventory.service.InventoryService;

@RestController
@RequestMapping("v1/items")
public class InventoryController {
	@Autowired
	private InventoryService inventoryService;

	@GetMapping
	public List<InventoryItem> retrieveAllItems() {
		return inventoryService.findAll();
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Optional<InventoryItem>> getInventoryItem(
			@PathVariable Long id) {
		Optional<InventoryItem> item = inventoryService
				.getInventoryItem(id);
		if (item.isEmpty()) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(item);
		}
	}
	
	  @GetMapping("/{itemId}/quantity/{quantity}")
	    public ResponseEntity<InventoryItem> updateInventoryQuantity(@PathVariable Long itemId, @PathVariable int quantity) {
	        try {
	        	InventoryItem item = inventoryService.getInventoryItem(itemId).get();
	        	
	            inventoryService.updateInventoryQuantity(itemId, quantity);
	            return ResponseEntity.ok(item);
	        } catch (NoSuchElementException e) {
	            return ResponseEntity.notFound().build();
	        }
	    }

	@PutMapping
	public ResponseEntity<InventoryItem> updateInventoryItem(
			@RequestBody InventoryItem item) {
		InventoryItem updatedItem = inventoryService.save(item);
		return ResponseEntity.ok(updatedItem);
	}

	@PostMapping
	public ResponseEntity<InventoryItem> createInventoryItem(
			@RequestBody InventoryItem item) {
		InventoryItem createdItem = inventoryService.save(item);
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(createdItem);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteInventoryItem(
			@PathVariable Long id) {
		Optional<InventoryItem> existingItem = inventoryService
				.getInventoryItem(id);
		if (existingItem.isEmpty()) {
			return ResponseEntity.notFound().build();
		} else {
			inventoryService.deleteInventoryItem(id);
			return ResponseEntity.noContent().build();
		}
	}
}