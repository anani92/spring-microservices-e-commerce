package com.ejada.microservices.inventory.controller;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ejada.microservices.inventory.model.InventoryItem;
import com.ejada.microservices.inventory.service.InventoryService;

import io.github.resilience4j.retry.annotation.Retry;

@RestController
@RequestMapping("v1/items")
public class InventoryController {
	@Autowired
	private InventoryService inventoryService;

	private Logger logger = LoggerFactory.getLogger(InventoryController.class);

	@GetMapping
	public List<InventoryItem> retrieveAllItems() {
		return inventoryService.findAll();
	}

	@GetMapping("/{id}")
	public ResponseEntity<Optional<InventoryItem>> getInventoryItem(@PathVariable Long id) {
		Optional<InventoryItem> item = inventoryService.getInventoryItem(id);
		if (item.isEmpty()) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(item);
		}
	}

	@GetMapping("/{itemId}/quantity/{quantity}")
	@Retry(name = "default")
	public ResponseEntity<InventoryItem> updateInventoryQuantity(@PathVariable Long itemId,
			@PathVariable int quantity) {

		logger.info("call to update quantity recieved");

		InventoryItem item = inventoryService.getInventoryItem(itemId).get();
			inventoryService.updateInventoryQuantity(itemId, quantity);

			return ResponseEntity.ok(item);
	}
	public String fallBackResponse(Exception e) {
		return "Error occured please make sure the Item exists";
	}
	@PutMapping
	public ResponseEntity<InventoryItem> updateInventoryItem(@RequestBody InventoryItem item) {
		InventoryItem updatedItem = inventoryService.save(item);
		return ResponseEntity.ok(updatedItem);
	}

	@PostMapping
	public ResponseEntity<InventoryItem> createInventoryItem(@RequestBody InventoryItem item) {
		InventoryItem createdItem = inventoryService.save(item);
		return ResponseEntity.status(HttpStatus.CREATED).body(createdItem);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteInventoryItem(@PathVariable Long id) {
		Optional<InventoryItem> existingItem = inventoryService.getInventoryItem(id);
		if (existingItem.isEmpty()) {
			return ResponseEntity.notFound().build();
		} else {
			inventoryService.deleteInventoryItem(id);
			return ResponseEntity.noContent().build();
		}
	}
}