package com.ejada.microservices.shop.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ejada.microservices.shop.model.Order;
import com.ejada.microservices.shop.model.OrderItem;
import com.ejada.microservices.shop.proxy.WalletServiceProxy;
import com.ejada.microservices.shop.repository.OrderRepository;

@Service
public class OrderService {
	private final OrderRepository orderRepository;
	private final WalletServiceProxy walletServiceProxy;

	public OrderService(OrderRepository orderRepository, WalletServiceProxy walletServiceProxy) {
		this.orderRepository = orderRepository;
		this.walletServiceProxy = walletServiceProxy;
	}

	public Order createOrder(Long userId, List<OrderItem> items) {
		Double totalCost = calculateTotalCost(items);
		boolean hasSufficientCredits = walletServiceProxy.checkSufficientCredits(userId, totalCost);

		if (hasSufficientCredits) {
			// Deduct the total cost from the user's wallet
			walletServiceProxy.deductFromWallet(userId, totalCost);

			// Create the order
			Order order = new Order(userId, items, totalCost);
			return orderRepository.save(order);
		} else {
			throw new InsufficientCreditsException("Insufficient credits in the user's wallet.");
		}
	}

	public List<Order> getOrdersByUserId(Long userId) {
		return orderRepository.findByUserId(userId);
	}

	private Double calculateTotalCost(List<OrderItem> items) {
		// Calculate the total cost by summing the prices of all items
		return items.stream().mapToDouble(item -> item.getPrice() * item.getQuantity()).sum();
	}
}
