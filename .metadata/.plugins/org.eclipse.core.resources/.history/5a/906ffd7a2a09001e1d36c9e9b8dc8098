package com.ejada.microservices.shop.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ejada.microservices.shop.model.Order;
import com.ejada.microservices.shop.model.OrderItem;
import com.ejada.microservices.shop.proxy.WalletServiceProxy;
import com.ejada.microservices.shop.repository.OrderRepository;

@Service
public class OrderService {
    private final OrderRepository orderRepository;
    private final WalletServiceProxy walletServiceProxy;
    
    public OrderService(OrderRepository orderRepository, WalletServiceClient walletServiceClient) {
        this.orderRepository = orderRepository;
        this.walletServiceClient = walletServiceClient;
    }
    
    public Order createOrder(Long userId, List<OrderItem> items) {
        // Calculate the total cost of the order
        Double totalCost = calculateTotalCost(items);
        
        // Check if the user has sufficient credits in their wallet
        boolean hasSufficientCredits = walletServiceClient.checkSufficientCredits(userId, totalCost);
        
        if (hasSufficientCredits) {
            // Deduct the total cost from the user's wallet
            walletServiceClient.deductFromWallet(userId, totalCost);
            
            // Create the order
            Order order = new Order(userId, items, totalCost);
            return orderRepository.save(order);
        } else {
            throw new InsufficientCreditsException("Insufficient credits in the user's wallet.");
        }
    }
    
    public List<Order> getOrdersByUserId(Long userId) {
        return orderRepository.findByUserId(userId);
    }
    
    private Double calculateTotalCost(List<OrderItem> items) {
        // Calculate the total cost by summing the prices of all items
        return items.stream()
                .mapToDouble(item -> item.getPrice() * item.getQuantity())
                .sum();
    }
}
