package com.ejada.microservices.wallet.controller;

import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ejada.microservices.wallet.exceptions.InsufficientCreditsException;
import com.ejada.microservices.wallet.exceptions.InvalidCredentialsException;
import com.ejada.microservices.wallet.model.ShopWallet;
import com.ejada.microservices.wallet.model.Transaction;
import com.ejada.microservices.wallet.model.User;
import com.ejada.microservices.wallet.model.UserWallet;
import com.ejada.microservices.wallet.service.ShopWalletService;
import com.ejada.microservices.wallet.service.TransactionService;
import com.ejada.microservices.wallet.service.UserService;
import com.ejada.microservices.wallet.service.UserWalletService;

@RestController
@RequestMapping("/v1/wallet")
public class WalletController {
	@Autowired
	private ShopWalletService walletService;
	@Autowired
	private UserWalletService userWalletService;
	@Autowired
	private UserService userService;
	@Autowired
	private TransactionService transactionService;

	@GetMapping("/user/{userId}")
	public ResponseEntity<UserWallet> getUserWallet(@PathVariable("userId") Long userId) {
		User user = userService.getUserById(userId);
		if (user == null) {
			throw new InvalidCredentialsException("invalid user id");
		}
		UserWallet wallet;
		try {
			wallet = userWalletService.getUserWallet(user);
			return ResponseEntity.status(HttpStatus.OK).body(wallet);

		} catch (Exception e) {
			wallet = userWalletService.createUserWallet(user);
			return ResponseEntity.status(HttpStatus.OK).body(wallet);		}

	}

	@PutMapping("/shop/add")
	public ResponseEntity<ShopWallet> increaseShopCredits(@RequestParam("shopId") Long shopId,
			@RequestParam("totalCost") Double totalCost) {
		ShopWallet shopWallet = walletService.addCredits(totalCost, shopId);
		walletService.save(shopWallet);
		return ResponseEntity.status(HttpStatus.CREATED).body(shopWallet);
	}

	@GetMapping("/{userId}/sufficient-credits")
	public boolean checkSufficientCredits(@PathVariable("userId") Long userId, @RequestParam("amount") Double amount) {
		User user = userService.getUserById(userId);
		Double credits = user.getUserWallet().getCredits();
		return credits >= amount;

	}

	@PutMapping("/{userId}/deduct-credits")
	void deductFromWallet(@PathVariable("userId") Long userId, @RequestParam("amount") Double amount) {
		User user = userService.getUserById(userId);
		if (user == null) {
			throw new NoSuchElementException("User Not found");
		}
		userWalletService.updateCredits(user, amount, false);
		transactionService.makeTransaction(amount * -1, user, "Order placement total");

		userService.save(user);

	}

	// withdraw
	@GetMapping("/users/withdraw/{userId}/{amount}")
	public Double withdraw(@PathVariable("userId") Long userId, @PathVariable("amount") Double amount) {
		User user = userService.getUserById(userId);
		if (!checkSufficientCredits(userId, amount)) {
			throw new InsufficientCreditsException("insuffecient funds");
		}
		Double credits = userWalletService.updateCredits(user, amount, false);
		transactionService.makeTransaction(amount * -1, user, "withdraw from account");

		return credits;
	}

	// deposit
	@GetMapping("/users/deposit/{userId}/{amount}")
	public Double deposit(@PathVariable("userId") Long userId, @PathVariable("amount") Double amount) {
		User user = userService.getUserById(userId);

		transactionService.makeTransaction(amount, user, "noticed credit from account");

		return userWalletService.updateCredits(user, amount, true);

	}
	
	


	@GetMapping("/transactions/user/{userId}")
	public List<Transaction> getUserTransactions(@PathVariable("userId") Long userId) {
		User user = userService.getUserById(userId);
		List<Transaction> userTransactions = transactionService.findUserTransactions(user);
		return userTransactions;

	}
}
