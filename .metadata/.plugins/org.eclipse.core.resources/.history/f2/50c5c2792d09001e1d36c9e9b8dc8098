package com.ejada.microservices.shop.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.ejada.microservices.shop.model.Cart;
import com.ejada.microservices.shop.model.CartItem;
import com.ejada.microservices.shop.model.InventoryItem;
import com.ejada.microservices.shop.model.Shop;
import com.ejada.microservices.shop.model.WalletItem;
import com.ejada.microservices.shop.proxy.InventoryServiceProxy;
import com.ejada.microservices.shop.proxy.WalletServiceProxy;
import com.ejada.microservices.shop.service.CartService;
import com.ejada.microservices.shop.service.ShopService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@RestController
@RequestMapping("v1/shop")
public class ShopController {
	@Autowired
	private ShopService shopService;
	@Autowired
	private InventoryServiceProxy inventoryProxy;
	@Autowired
	private WalletServiceProxy walletProxy;
	@Autowired
	private CartService cartService;

	private Logger logger = LoggerFactory.getLogger(ShopController.class);

	// ********* Shop APIS ***************// 
	
	@GetMapping
	public List<Shop> retrieveAllShops() {
		return shopService.findAll();
	}

	@GetMapping("/{id}")
	public ResponseEntity<Shop> getShop(@PathVariable Long id) {
		Shop shop = shopService.getShop(id);
		if (shop == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(shop);
		}
	}

	@PutMapping
	public ResponseEntity<Shop> updateShop(@RequestBody Shop item) {
		Shop updatedItem = shopService.save(item);
		return ResponseEntity.ok(updatedItem);
	}

	@PostMapping
	public ResponseEntity<Shop> createShop(@RequestBody Shop item) {
		Shop createdItem = shopService.save(item);
		return ResponseEntity.status(HttpStatus.CREATED).body(createdItem);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteShop(@PathVariable Long id) {
		Shop item = shopService.getShop(id);
		if (item == null) {
			return ResponseEntity.notFound().build();
		} else {
			shopService.deleteShop(id);
			return ResponseEntity.noContent().build();
		}
	}

	// ********* Inventory proxy APIS ********** //

	@GetMapping("/items/{itemId}")
	public ResponseEntity<InventoryItem> getInventoryItem(@PathVariable("itemId") Long itemId) {
		InventoryItem item = inventoryProxy.getInventoryItem(itemId);
		if (item == null) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(item);
	}

	@PutMapping("/items")
	public ResponseEntity<InventoryItem> updateInventoryItem(@RequestBody InventoryItem item) {
		inventoryProxy.updateInventoryItem(item);
		return ResponseEntity.ok(item);
	}

	@PostMapping("/items")
	public ResponseEntity<InventoryItem> createInventoryItem(@RequestBody InventoryItem item) {
		inventoryProxy.createInventoryItem(item);
		return ResponseEntity.status(HttpStatus.CREATED).body(item);
	}

	@GetMapping("/place-order/shop/{shopId}/cart/{cartId}")
	public ResponseEntity<String> placeOrder(@PathVariable("cartId") Long cartId, @PathVariable("shopId") Long shopId) {

		return null;
	}

	public ResponseEntity<InventoryItem> fallbackResponse(Exception e) {
		logger.error("Fallback method executed for updateInventoryQuantity");

		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}
}