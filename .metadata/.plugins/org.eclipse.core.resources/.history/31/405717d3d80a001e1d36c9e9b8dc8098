package com.ejada.microservices.inventory.controller;

import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ejada.microservices.inventory.model.InventoryItem;
import com.ejada.microservices.inventory.service.InventoryService;

@RestController
@RequestMapping("v1/items")
public class InventoryController {
	@Autowired
	private InventoryService inventoryService;

	private Logger logger = LoggerFactory.getLogger(InventoryController.class);

	@GetMapping
	public List<InventoryItem> retrieveAllItems() {
		return inventoryService.findAll();
	}

	@GetMapping("/{itemId}")
	public ResponseEntity<InventoryItem> getInventoryItem(@PathVariable("itemId") Long itemId) {
		Optional<InventoryItem> item = inventoryService.getInventoryItem(itemId);
		if (item.isEmpty()) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(item.get());
		}
	}

	@GetMapping("/{itemId}/quantity/{quantity}")
	public ResponseEntity<InventoryItem> updateInventoryQuantity(@PathVariable("itemId") Long itemId,
			@PathVariable("quantity") int quantity) {
		logger.info("call to update quantity recieved");

		quantity *= -1;
		InventoryItem item = inventoryService.getInventoryItem(itemId).get();
		if (item != null) {
			if (item.getQuantity() > quantity) {
				inventoryService.updateInventoryQuantity(itemId, quantity);
				return ResponseEntity.ok(item);
			} else {
				throw new OutOfStockException(
						"Inventory does not have enough supply to complete the order available amount is: "
								+ item.getQuantity());
			}

		} else {
			return ResponseEntity.notFound().build();
		}

	}

	@GetMapping("/{itemId}/supply/quantity/{quantity}")
	public ResponseEntity<InventoryItem> updateInventorySupply(@PathVariable Long itemId, @PathVariable int quantity) {
		logger.info("call to update quantity supply recieved");

		InventoryItem item = inventoryService.getInventoryItem(itemId).get();
		if (item != null) {
			inventoryService.updateInventoryQuantity(itemId, quantity);
			return ResponseEntity.ok(item);

		} else {
			return ResponseEntity.notFound().build();
		}

	}

	@PutMapping
	public ResponseEntity<InventoryItem> updateInventoryItem(@RequestBody InventoryItem item) {
		InventoryItem updatedItem = inventoryService.save(item);
		return ResponseEntity.ok(updatedItem);
	}

	@PostMapping
	public ResponseEntity<InventoryItem> createInventoryItem(@RequestBody InventoryItem item) {
		InventoryItem createdItem = inventoryService.save(item);
		return ResponseEntity.status(HttpStatus.CREATED).body(createdItem);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteInventoryItem(@PathVariable Long id) {
		Optional<InventoryItem> existingItem = inventoryService.getInventoryItem(id);
		if (existingItem.isEmpty()) {
			return ResponseEntity.notFound().build();
		} else {
			inventoryService.deleteInventoryItem(id);
			return ResponseEntity.noContent().build();
		}
	}
}